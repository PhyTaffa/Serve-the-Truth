
---

# **How to Run This Server on Your 'State-of-the-Art' Machine (RIP)**

Hey, hey people. Filippo here.

Congratulations! You've just set foot in the **wonderful, soul-crushing world of server hosting**, where your **glorious, state-of-the-art machine** (aka the potato you call your "gaming rig") will become a **fully-fledged server**. It’s going to be **an adventure**… mostly involving screaming at your screen.

---

### **1. Open the Project in VS Code (You Actually Managed to Do This)**

So, you cloned the repo from GitHub. Incredible. Now, open it in **VS Code**, the a text editor of our times. I mean, if you’re still using Notepad, I’m amazed you even found this readme without getting lost on the way. Press that shiny **VS Code** button, open the cloned repository, and let’s see if you can navigate your way out of this nightmare. No pressure. But, you know, there’s *always* pressure. 

I’m just going to say this upfront: This is the **only way I know how to do it**, so buckle up. If you find a better way, don’t tell me—I’m not ready for that kind of responsibility.

---

### **2. STRONGLY Suggestion: Download the Latest LTS Version of Node.js**

Before you do anything, make sure you have the latest **LTS (Long-Term Support)** version of **Node.js** installed on your machine, why LTS? Because you don’t need to be messing with the Current version unless you’re really living on the edge. You can download it here: [Node.js Official Download](https://nodejs.org/). This is important because using an outdated version of Node.js will likely cause issues and make your life more miserable than already is. I know, unbelievable.

---

### **3. Install the Magic Packages (Not as Hard as It Sounds, I Swear)**

Okay, now it’s time to **actually work**, but don’t panic, it’s not that bad. You won’t have to sell your soul or figure out why your computer is making weird noises. Just open a **PowerShell terminal inside VS** (because that’s what all the cool kids use, right?). Run this command:

```bash
npm install express express-session mysql2 cors
```

**CCP-Approved™**

I know what you’re thinking: *Why in the hell do I need all this stuff?* Let’s break it down, champ:

- **express**: Because setting up an HTTP server by hand is for **absolute masochists** who clearly have nothing better to do.
- **express-session**: It will remember you. Unlike that one game where you forgot to save and lost hours of progress. Don’t worry, your server will always remember you.
- **mysql2**: Because your server needs to talk to a **database**—and **database** sounds like something you can’t escape from, but it’s just a fancy word for "data storage" that will never, ever, ever work on the first try.
- **cors**: It makes your server not spontaneously combust when it talks to the outside world. Your server won’t implode from external requests, but don’t hold your breath for anything else.

Once you type this out, hit **Enter**, and sit back. The terminal will work its magic and install everything while you stare blankly at the screen and wonder if you’ve made a terrible mistake.

---

### **4. Install Nodemon (The Lazy Way)**

Here’s where things get even lazier. Instead of manually restarting your server every time you make a change, you’re going to install **nodemon** globally, so it’ll do **half the work for you**. Open your terminal, inside VS Code, and run this:

```bash
npm install -g nodemon
```

**Pro Tip**: Don’t worry about typing it all out every time. This is **global** installation, so it’ll be available everywhere.

---

### **5. Download the Database (Don't Panic, It's Just MySQL)**

Alright, you’ve made it this far—now let’s talk about getting your **MySQL database** up and running. You’re going to need **MySQL Server 8.2** (or **any version over 8.0**) and **MySQL Workbench 8.0.xx**. If you think this will be the smoothest part of the setup, I’ve got some bad news: it won’t be. It’s the part of the setup where you question your life choices and wonder why you didn’t just become a professional napper instead.

#### **Step 1: Download MySQL Server 8.2 (or Later)**

First things first: head over to the official **MySQL website**. Don’t Google “MySQL download” unless you want to get lost in a labyrinth of third-party websites. Go to this direct link:  
[Download MySQL Server 8.2 (or later)](https://dev.mysql.com/downloads/installer/).

Now, here’s where you *might* get a little confused:

- **Select your operating system**: Windows, MacOS, Linux—pick your poison. I'm assuming you're on Windows because that's where the magic happens, but if you’re using Linux, good luck, my friend. You're on your own.
  
- **Choose the MySQL Installer**: You’ll get an option for a web installer or a full installer. **Full installer** is the way to go because you don’t want to be **downloading dependencies** every time you blink.

Once it’s downloaded, run the installer and let it do its thing. It will ask you if you want the **Developer Default** setup, or a **Custom** setup. Choose **Developer Default** unless you want to spend 45 minutes unchecking random options because you have no idea what they do. Pro tip: leave everything checked. The only thing you might not need is **MySQL Workbench**, but if you’re into making your life harder, go ahead and install it.

**IMPORTANT NOTE**: Do **NOT** forget the password you set for the **root** user during installation. **Seriously**. We both know you’re not going to create a new user—nobody ever does. So when it asks for the password, **make sure you remember it** (or store it somewhere safe). You’ll be using the **root** user for this setup, and it will be your lifeline (or your downfall) throughout this process.

#### **Step 2: Install MySQL Workbench 8.0.xx**

Now, for **MySQL Workbench 8.0.xx**. This is an essential tool to manage and interact with your MySQL server through a nice graphical interface, because who wants to type SQL commands all day? Not you, I’m sure.

Head over to the MySQL Workbench download page:  
[Download MySQL Workbench 8.0.xx](https://dev.mysql.com/downloads/workbench/).

Choose your operating system and download the installer. Once that’s done, run the installer and follow the prompts.

#### **Step 3. Set Up the Database Schema and Run Scripts**

Alright, you've made it this far, now let's take a deep breath and set up your **MySQL database schema** and run the necessary scripts. It’s time to define your database structure and get things rolling. Don’t worry, you’ll survive this!

1. **Open MySQL Workbench**: If you haven’t installed it yet, go back and do that. If you’ve got it, great. Launch it, and use your **root user** to log in (you did remember the password, right?).

2. **Create the Database Schema (Only Once, Please)**: You’ll need to create the schema **just once**. Here’s how:

    - On the left side of MySQL Workbench, find the **SCHEMAS** section. Right-click anywhere in this section and select **Create Schema**.
    - **Name Your Schema**: You can name it whatever you like, but let’s stick with `your_db_name` for consistency.
    - Click **Apply** to create the schema.
    - **Only Do This Once**: From now on, use this schema for all your operations.
    - Once the schema is created, **double-click** it in the left sidebar to select it. If you don’t see it immediately, click the **Update** button (the circular arrow icon near the top-left corner) to refresh the schema list.

3. **Grab the Create and Insert Scripts**: Now that your schema is in place, you need to run the necessary **SQL scripts** from the repo. These will define your tables, relationships, and other important elements of your database. After that, grab the **insert scripts** to populate your database with initial data.

4. **Copy and Paste**: Open the SQL scripts you downloaded from the `DataBaseScripts` folder. Copy the contents of the `serve-the.truth-Creates.txt` and paste them into the MySQL Workbench query window, then do the same for the `serve-the.truth-Inserts.txt`. After pasting both scripts, click the **lightning bolt icon** (or press **Ctrl + Shift + Enter**) to run them.

Congratulations, your database is now set up and populated! You've successfully made it through the process and can start working with your server. Feel free to pretend like this was easy.

---

### **6. Update Database Configuration (Do NOT Mess This Up)**

Here it is: the **danger zone**. Forget the database credentials, and you'll end up with a server that's **about as useful as a brick with Wi-Fi**. Open the `database.js` file and change the database information to something *you can actually use*.

You’ll need to update:

- **host**: Set this to 'localhost' if you’re keeping it simple, or *go big* with a remote server. But remember, that’s a step into **uncharted waters**, so don’t get cocky.
- **user**: Your **MySQL username**. Pro tip: It should **not** 'root' but knowing you, the chance that ityou didnt create another user are inflated, just how i like it.
- **password**: Remember that password you set? Yeah, it’s the one you don’t share with anyone. Hopefully you still remember it.
- **database**: The name of the database. It **better exist**, because this isn’t a guessing game. *Throwing random words at it won’t help*.

Here’s what your `database.js` should look like once you update it:

```javascript
const mysql = require('mysql2');

const connection = mysql.createConnection({
  host: 'localhost',  // Change this if you're a masochist and using a remote server
  user: 'your_db_user',  // Not 'root', for the love of God, but it's going to be "root" either way
  password: 'your_db_password',  // You remembered this, right?
  database: 'your_db_name'  // Yes, this must exist. Please don’t just type gibberish
});
```

If you **don’t** mess this up, your server will **thank you**. If you do, well, prepare for **total anarchy**.

---

### **7. Run the Server (Prepare for Glory)**

Alright, enough procrastinating. It’s time to launch this **beast**. Open up a **Command Prompt** (because we’re not about that "fancy" PowerShell life for this step),

 and run:

```bash
nodemon api/index.js
```

This magical incantation will summon your server into existence. **Don’t panic** when your screen fills up with text like you’re trying to read the matrix. That’s just the server doing its thing. You’ll see something like this:

```
Server is running on http://0.0.0.0:3000 🤙
Connected to the database! Please don’t break anything.
```

You did it. **Congratulations**, your server is now alive, and it will **exist until it inevitably breaks**, which will happen because servers have a way of doing that.

---

### **8. Stop the Madness (Before It Consumes Your Soul)**

Want to stop the server? Maybe you’re tired, maybe the **CCP is watching**, or maybe you just want to play more **breeders of nephelim**. Whatever the case, don’t sweat it. You don’t need to restart your whole computer like a savage.

Just press **Ctrl + C** in your **Command Prompt**, and your server will peacefully die. It’s that easy. The **circle of life** continues, and you can resume living in your perpetual state of confusion.

---

**That’s It!** You’ve officially set up a server that will run until your "state-of-the-art" machine decides it’s had enough. If you run into any issues, just blame your database, your toaster, or your hamster who’s secretly running the server behind your back.

Good luck, and may your server bring you more joy than that one time you tried to set up a Minecraft server. Or, at the very least, more joy than the last 45 minutes of your life you just spent reading this.

---

### Additional Notes:

- **Remember**: Your server will break. It always does. It’s not a matter of *if*, but *when*. Be prepared to troubleshoot, possibly for hours.
- If this guide somehow helped you get the server running, I’d love a thank-you note. Or, you know, a **massive cash donation**. Just saying.
- Also, don’t forget: **The CCP is always watching**.

---